// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

// Définition des Enums pour les rôles et les statuts
enum Role {
  USER
  ADMIN
  EDITOR
}

enum Status {
  ACTIVE
  SUSPENDED
  PENDING
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Modèle User complet
model User {
  id                        Int      @id @default(autoincrement())
  email                     String   @unique
  password                  String
  firstName                 String?
  lastName                  String?
  role                      Role     @default(USER)
  status                    Status   @default(PENDING)
  emailVerified             Boolean  @default(false)
  emailVerificationToken    String?
  passwordResetToken        String?
  passwordResetTokenExpiry  DateTime?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  avatarUrl String?
  bio String?
  dateOfBirth DateTime?
  phoneNumber String? @unique
  articles Post[]
  orders Order[]
  reviews Review[]
  wishlist Wishlist[]
  transactions Transaction[]
  feedbacks UserFeedback[]
  categorySubscriptions CategorySubscription[]
  favoriteSellersAsUser   FavoriteSeller[] @relation("UserFavorites")
  favoriteSellersAsSeller FavoriteSeller[] @relation("SellerFavorites")
  sentMessages Message[] @relation("messageSender")
  receivedMessages Message[] @relation("messageReceiver")
  
}


model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  authorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  categoryId  Int
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
  wishlist    Wishlist[]
  category    Category @relation(fields: [categoryId], references: [id])
  events      Event[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  products  Product[]
  categorySubscriptions CategorySubscription[]
}


model Order {
  id          Int       @id @default(autoincrement())
  userId      Int
  products    Json      // Peut contenir des détails sur les produits commandés et les quantités
  totalPrice  Float
  status      OrderStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  transactions Transaction[]

}


model Review {
  id         Int      @id @default(autoincrement())
  productId  Int
  userId     Int
  rating     Int      // Par exemple, de 1 à 5
  comment    String?
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  products  Product[] // Relation many-to-many implicite correctement définie
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}



model Transaction {
  id            Int      @id @default(autoincrement())
  userId        Int
  orderId       Int
  transactionType String // "ACHAT" ou "VENTE"
  amount        Float
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  order         Order    @relation(fields: [orderId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  products    Product[]
}


model UserFeedback {
  id         Int      @id @default(autoincrement())
  userId     Int
  content    String
  rating     Int      // Par exemple, de 1 à 5
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}


model CategorySubscription {
  id         Int      @id @default(autoincrement())
  userId     Int
  categoryId Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

model FavoriteSeller {
  id        Int      @id @default(autoincrement())
  userId    Int
  sellerId  Int
  createdAt DateTime @default(now())
  user     User @relation(name: "UserFavorites", fields: [userId], references: [id])
  seller   User @relation(name: "SellerFavorites", fields: [sellerId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  sender     User @relation("messageSender", fields: [senderId], references: [id])
  receiver   User @relation("messageReceiver", fields: [receiverId], references: [id])
}
